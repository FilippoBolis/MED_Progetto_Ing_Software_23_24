/*
 * This file is generated by jOOQ.
 */
package medDB.jooq.generated.tables;


import java.util.function.Function;

import medDB.jooq.generated.DefaultSchema;
import medDB.jooq.generated.Keys;
import medDB.jooq.generated.tables.records.DegenteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Degente extends TableImpl<DegenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEGENTE</code>
     */
    public static final Degente DEGENTE = new Degente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DegenteRecord> getRecordType() {
        return DegenteRecord.class;
    }

    /**
     * The column <code>DEGENTE.CODICE</code>.
     */
    public final TableField<DegenteRecord, String> CODICE = createField(DSL.name("CODICE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DEGENTE.NOME</code>.
     */
    public final TableField<DegenteRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DEGENTE.COGNOME</code>.
     */
    public final TableField<DegenteRecord, String> COGNOME = createField(DSL.name("COGNOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DEGENTE.URGENZA</code>.
     */
    public final TableField<DegenteRecord, Integer> URGENZA = createField(DSL.name("URGENZA"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEGENTE.IN_ATTESA</code>.
     */
    public final TableField<DegenteRecord, Boolean> IN_ATTESA = createField(DSL.name("IN_ATTESA"), SQLDataType.BOOLEAN, this, "");

    private Degente(Name alias, Table<DegenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Degente(Name alias, Table<DegenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DEGENTE</code> table reference
     */
    public Degente(String alias) {
        this(DSL.name(alias), DEGENTE);
    }

    /**
     * Create an aliased <code>DEGENTE</code> table reference
     */
    public Degente(Name alias) {
        this(alias, DEGENTE);
    }

    /**
     * Create a <code>DEGENTE</code> table reference
     */
    public Degente() {
        this(DSL.name("DEGENTE"), null);
    }

    public <O extends Record> Degente(Table<O> child, ForeignKey<O, DegenteRecord> key) {
        super(child, key, DEGENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DegenteRecord> getPrimaryKey() {
        return Keys.DEGENTE__PK_DEGENTE;
    }

    @Override
    public Degente as(String alias) {
        return new Degente(DSL.name(alias), this);
    }

    @Override
    public Degente as(Name alias) {
        return new Degente(alias, this);
    }

    @Override
    public Degente as(Table<?> alias) {
        return new Degente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Degente rename(String name) {
        return new Degente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Degente rename(Name name) {
        return new Degente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Degente rename(Table<?> name) {
        return new Degente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
