/*
 * This file is generated by jOOQ.
 */
package medDB.jooq.generated.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import medDB.jooq.generated.DefaultSchema;
import medDB.jooq.generated.Keys;
import medDB.jooq.generated.tables.records.DiariamedRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diariamed extends TableImpl<DiariamedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DIARIAMED</code>
     */
    public static final Diariamed DIARIAMED = new Diariamed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiariamedRecord> getRecordType() {
        return DiariamedRecord.class;
    }

    /**
     * The column <code>DIARIAMED.CODICE</code>.
     */
    public final TableField<DiariamedRecord, String> CODICE = createField(DSL.name("CODICE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.CODICE_DEGENTE</code>.
     */
    public final TableField<DiariamedRecord, String> CODICE_DEGENTE = createField(DSL.name("CODICE_DEGENTE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.CODICE_MEDICO</code>.
     */
    public final TableField<DiariamedRecord, String> CODICE_MEDICO = createField(DSL.name("CODICE_MEDICO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.STORICO</code>.
     */
    public final TableField<DiariamedRecord, String> STORICO = createField(DSL.name("STORICO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.MOTIVO</code>.
     */
    public final TableField<DiariamedRecord, String> MOTIVO = createField(DSL.name("MOTIVO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.FARMACI</code>.
     */
    public final TableField<DiariamedRecord, String> FARMACI = createField(DSL.name("FARMACI"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DIARIAMED.DATA</code>.
     */
    public final TableField<DiariamedRecord, LocalDate> DATA = createField(DSL.name("DATA"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>DIARIAMED.ORA</code>.
     */
    public final TableField<DiariamedRecord, LocalTime> ORA = createField(DSL.name("ORA"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>DIARIAMED.ALLERGIE</code>.
     */
    public final TableField<DiariamedRecord, String> ALLERGIE = createField(DSL.name("ALLERGIE"), SQLDataType.CLOB, this, "");

    private Diariamed(Name alias, Table<DiariamedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diariamed(Name alias, Table<DiariamedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DIARIAMED</code> table reference
     */
    public Diariamed(String alias) {
        this(DSL.name(alias), DIARIAMED);
    }

    /**
     * Create an aliased <code>DIARIAMED</code> table reference
     */
    public Diariamed(Name alias) {
        this(alias, DIARIAMED);
    }

    /**
     * Create a <code>DIARIAMED</code> table reference
     */
    public Diariamed() {
        this(DSL.name("DIARIAMED"), null);
    }

    public <O extends Record> Diariamed(Table<O> child, ForeignKey<O, DiariamedRecord> key) {
        super(child, key, DIARIAMED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DiariamedRecord> getPrimaryKey() {
        return Keys.DIARIAMED__PK_DIARIAMED;
    }

    @Override
    public List<ForeignKey<DiariamedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DIARIAMED__FK_DIARIAMED_PK_DEGENTE);
    }

    private transient Degente _degente;

    /**
     * Get the implicit join path to the <code>DEGENTE</code> table.
     */
    public Degente degente() {
        if (_degente == null)
            _degente = new Degente(this, Keys.DIARIAMED__FK_DIARIAMED_PK_DEGENTE);

        return _degente;
    }

    @Override
    public Diariamed as(String alias) {
        return new Diariamed(DSL.name(alias), this);
    }

    @Override
    public Diariamed as(Name alias) {
        return new Diariamed(alias, this);
    }

    @Override
    public Diariamed as(Table<?> alias) {
        return new Diariamed(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diariamed rename(String name) {
        return new Diariamed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diariamed rename(Name name) {
        return new Diariamed(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diariamed rename(Table<?> name) {
        return new Diariamed(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, LocalDate, LocalTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super LocalTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super LocalTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
