/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.RepartoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reparto extends TableImpl<RepartoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REPARTO</code>
     */
    public static final Reparto REPARTO = new Reparto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepartoRecord> getRecordType() {
        return RepartoRecord.class;
    }

    /**
     * The column <code>REPARTO.CODICE</code>.
     */
    public final TableField<RepartoRecord, String> CODICE = createField(DSL.name("CODICE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>REPARTO.NOME_REPARTO</code>.
     */
    public final TableField<RepartoRecord, String> NOME_REPARTO = createField(DSL.name("NOME_REPARTO"), SQLDataType.CLOB, this, "");

    private Reparto(Name alias, Table<RepartoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reparto(Name alias, Table<RepartoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>REPARTO</code> table reference
     */
    public Reparto(String alias) {
        this(DSL.name(alias), REPARTO);
    }

    /**
     * Create an aliased <code>REPARTO</code> table reference
     */
    public Reparto(Name alias) {
        this(alias, REPARTO);
    }

    /**
     * Create a <code>REPARTO</code> table reference
     */
    public Reparto() {
        this(DSL.name("REPARTO"), null);
    }

    public <O extends Record> Reparto(Table<O> child, ForeignKey<O, RepartoRecord> key) {
        super(child, key, REPARTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RepartoRecord> getPrimaryKey() {
        return Keys.REPARTO__PK_REPARTO;
    }

    @Override
    public Reparto as(String alias) {
        return new Reparto(DSL.name(alias), this);
    }

    @Override
    public Reparto as(Name alias) {
        return new Reparto(alias, this);
    }

    @Override
    public Reparto as(Table<?> alias) {
        return new Reparto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reparto rename(String name) {
        return new Reparto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reparto rename(Name name) {
        return new Reparto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reparto rename(Table<?> name) {
        return new Reparto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
