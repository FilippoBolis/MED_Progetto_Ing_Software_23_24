/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.ModuloRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Modulo extends TableImpl<ModuloRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MODULO</code>
     */
    public static final Modulo MODULO = new Modulo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModuloRecord> getRecordType() {
        return ModuloRecord.class;
    }

    /**
     * The column <code>MODULO.CODICE_REPARTO</code>.
     */
    public final TableField<ModuloRecord, String> CODICE_REPARTO = createField(DSL.name("CODICE_REPARTO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MODULO.NOME</code>.
     */
    public final TableField<ModuloRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    private Modulo(Name alias, Table<ModuloRecord> aliased) {
        this(alias, aliased, null);
    }

    private Modulo(Name alias, Table<ModuloRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MODULO</code> table reference
     */
    public Modulo(String alias) {
        this(DSL.name(alias), MODULO);
    }

    /**
     * Create an aliased <code>MODULO</code> table reference
     */
    public Modulo(Name alias) {
        this(alias, MODULO);
    }

    /**
     * Create a <code>MODULO</code> table reference
     */
    public Modulo() {
        this(DSL.name("MODULO"), null);
    }

    public <O extends Record> Modulo(Table<O> child, ForeignKey<O, ModuloRecord> key) {
        super(child, key, MODULO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ModuloRecord> getPrimaryKey() {
        return Keys.MODULO__PK_MODULO;
    }

    @Override
    public List<ForeignKey<ModuloRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODULO__FK_MODULO_PK_REPARTO);
    }

    private transient Reparto _reparto;

    /**
     * Get the implicit join path to the <code>REPARTO</code> table.
     */
    public Reparto reparto() {
        if (_reparto == null)
            _reparto = new Reparto(this, Keys.MODULO__FK_MODULO_PK_REPARTO);

        return _reparto;
    }

    @Override
    public Modulo as(String alias) {
        return new Modulo(DSL.name(alias), this);
    }

    @Override
    public Modulo as(Name alias) {
        return new Modulo(alias, this);
    }

    @Override
    public Modulo as(Table<?> alias) {
        return new Modulo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Modulo rename(String name) {
        return new Modulo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modulo rename(Name name) {
        return new Modulo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modulo rename(Table<?> name) {
        return new Modulo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
