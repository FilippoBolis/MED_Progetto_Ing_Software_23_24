/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.RilevazioneRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rilevazione extends TableImpl<RilevazioneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RILEVAZIONE</code>
     */
    public static final Rilevazione RILEVAZIONE = new Rilevazione();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RilevazioneRecord> getRecordType() {
        return RilevazioneRecord.class;
    }

    /**
     * The column <code>RILEVAZIONE.ID</code>.
     */
    public final TableField<RilevazioneRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RILEVAZIONE.CODICE_DEGENTE</code>.
     */
    public final TableField<RilevazioneRecord, String> CODICE_DEGENTE = createField(DSL.name("CODICE_DEGENTE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RILEVAZIONE.TEMPERATURA</code>.
     */
    public final TableField<RilevazioneRecord, Double> TEMPERATURA = createField(DSL.name("TEMPERATURA"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>RILEVAZIONE.PRESSIONE_MAX</code>.
     */
    public final TableField<RilevazioneRecord, Integer> PRESSIONE_MAX = createField(DSL.name("PRESSIONE_MAX"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RILEVAZIONE.PRESSIONE_MIN</code>.
     */
    public final TableField<RilevazioneRecord, Integer> PRESSIONE_MIN = createField(DSL.name("PRESSIONE_MIN"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RILEVAZIONE.GLICEMIA</code>.
     */
    public final TableField<RilevazioneRecord, Integer> GLICEMIA = createField(DSL.name("GLICEMIA"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RILEVAZIONE.DATA</code>.
     */
    public final TableField<RilevazioneRecord, LocalDate> DATA = createField(DSL.name("DATA"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>RILEVAZIONE.ORA</code>.
     */
    public final TableField<RilevazioneRecord, LocalTime> ORA = createField(DSL.name("ORA"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>RILEVAZIONE.FREQ_CARD</code>.
     */
    public final TableField<RilevazioneRecord, Integer> FREQ_CARD = createField(DSL.name("FREQ_CARD"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RILEVAZIONE.DOLORE</code>.
     */
    public final TableField<RilevazioneRecord, Integer> DOLORE = createField(DSL.name("DOLORE"), SQLDataType.INTEGER, this, "");

    private Rilevazione(Name alias, Table<RilevazioneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rilevazione(Name alias, Table<RilevazioneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RILEVAZIONE</code> table reference
     */
    public Rilevazione(String alias) {
        this(DSL.name(alias), RILEVAZIONE);
    }

    /**
     * Create an aliased <code>RILEVAZIONE</code> table reference
     */
    public Rilevazione(Name alias) {
        this(alias, RILEVAZIONE);
    }

    /**
     * Create a <code>RILEVAZIONE</code> table reference
     */
    public Rilevazione() {
        this(DSL.name("RILEVAZIONE"), null);
    }

    public <O extends Record> Rilevazione(Table<O> child, ForeignKey<O, RilevazioneRecord> key) {
        super(child, key, RILEVAZIONE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RilevazioneRecord> getPrimaryKey() {
        return Keys.RILEVAZIONE__PK_RILEVAZIONE;
    }

    @Override
    public List<ForeignKey<RilevazioneRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RILEVAZIONE__FK_RILEVAZIONE_PK_DEGENTE);
    }

    private transient Degente _degente;

    /**
     * Get the implicit join path to the <code>DEGENTE</code> table.
     */
    public Degente degente() {
        if (_degente == null)
            _degente = new Degente(this, Keys.RILEVAZIONE__FK_RILEVAZIONE_PK_DEGENTE);

        return _degente;
    }

    @Override
    public Rilevazione as(String alias) {
        return new Rilevazione(DSL.name(alias), this);
    }

    @Override
    public Rilevazione as(Name alias) {
        return new Rilevazione(alias, this);
    }

    @Override
    public Rilevazione as(Table<?> alias) {
        return new Rilevazione(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rilevazione rename(String name) {
        return new Rilevazione(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rilevazione rename(Name name) {
        return new Rilevazione(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rilevazione rename(Table<?> name) {
        return new Rilevazione(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Double, Integer, Integer, Integer, LocalDate, LocalTime, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? super LocalTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? super LocalTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
