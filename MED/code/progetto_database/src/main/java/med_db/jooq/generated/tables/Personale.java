/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.PersonaleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Personale extends TableImpl<PersonaleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PERSONALE</code>
     */
    public static final Personale PERSONALE = new Personale();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonaleRecord> getRecordType() {
        return PersonaleRecord.class;
    }

    /**
     * The column <code>PERSONALE.CODICE</code>.
     */
    public final TableField<PersonaleRecord, String> CODICE = createField(DSL.name("CODICE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PERSONALE.NOME</code>.
     */
    public final TableField<PersonaleRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PERSONALE.COGNOME</code>.
     */
    public final TableField<PersonaleRecord, String> COGNOME = createField(DSL.name("COGNOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PERSONALE.MANSIONE</code>.
     */
    public final TableField<PersonaleRecord, String> MANSIONE = createField(DSL.name("MANSIONE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PERSONALE.PASSWORD</code>.
     */
    public final TableField<PersonaleRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.CLOB, this, "");

    private Personale(Name alias, Table<PersonaleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Personale(Name alias, Table<PersonaleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PERSONALE</code> table reference
     */
    public Personale(String alias) {
        this(DSL.name(alias), PERSONALE);
    }

    /**
     * Create an aliased <code>PERSONALE</code> table reference
     */
    public Personale(Name alias) {
        this(alias, PERSONALE);
    }

    /**
     * Create a <code>PERSONALE</code> table reference
     */
    public Personale() {
        this(DSL.name("PERSONALE"), null);
    }

    public <O extends Record> Personale(Table<O> child, ForeignKey<O, PersonaleRecord> key) {
        super(child, key, PERSONALE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PersonaleRecord> getPrimaryKey() {
        return Keys.PERSONALE__PK_PERSONALE;
    }

    @Override
    public Personale as(String alias) {
        return new Personale(DSL.name(alias), this);
    }

    @Override
    public Personale as(Name alias) {
        return new Personale(alias, this);
    }

    @Override
    public Personale as(Table<?> alias) {
        return new Personale(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Personale rename(String name) {
        return new Personale(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Personale rename(Name name) {
        return new Personale(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Personale rename(Table<?> name) {
        return new Personale(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
