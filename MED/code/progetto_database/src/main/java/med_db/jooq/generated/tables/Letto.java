/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.LettoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Letto extends TableImpl<LettoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LETTO</code>
     */
    public static final Letto LETTO = new Letto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LettoRecord> getRecordType() {
        return LettoRecord.class;
    }

    /**
     * The column <code>LETTO.CODICE_REPARTO</code>.
     */
    public final TableField<LettoRecord, String> CODICE_REPARTO = createField(DSL.name("CODICE_REPARTO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LETTO.NOME_MODULO</code>.
     */
    public final TableField<LettoRecord, String> NOME_MODULO = createField(DSL.name("NOME_MODULO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LETTO.NUMERO</code>.
     */
    public final TableField<LettoRecord, Integer> NUMERO = createField(DSL.name("NUMERO"), SQLDataType.INTEGER, this, "");

    private Letto(Name alias, Table<LettoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Letto(Name alias, Table<LettoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LETTO</code> table reference
     */
    public Letto(String alias) {
        this(DSL.name(alias), LETTO);
    }

    /**
     * Create an aliased <code>LETTO</code> table reference
     */
    public Letto(Name alias) {
        this(alias, LETTO);
    }

    /**
     * Create a <code>LETTO</code> table reference
     */
    public Letto() {
        this(DSL.name("LETTO"), null);
    }

    public <O extends Record> Letto(Table<O> child, ForeignKey<O, LettoRecord> key) {
        super(child, key, LETTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LettoRecord> getPrimaryKey() {
        return Keys.LETTO__PK_LETTO;
    }

    @Override
    public List<ForeignKey<LettoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LETTO__FK_LETTO_PK_REPARTO);
    }

    private transient Reparto _reparto;

    /**
     * Get the implicit join path to the <code>REPARTO</code> table.
     */
    public Reparto reparto() {
        if (_reparto == null)
            _reparto = new Reparto(this, Keys.LETTO__FK_LETTO_PK_REPARTO);

        return _reparto;
    }

    @Override
    public Letto as(String alias) {
        return new Letto(DSL.name(alias), this);
    }

    @Override
    public Letto as(Name alias) {
        return new Letto(alias, this);
    }

    @Override
    public Letto as(Table<?> alias) {
        return new Letto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Letto rename(String name) {
        return new Letto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Letto rename(Name name) {
        return new Letto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Letto rename(Table<?> name) {
        return new Letto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
